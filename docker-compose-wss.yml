version: '3.8'

services:
  asterisk:
    build:
      context: ./asterisk
      dockerfile: Dockerfile
    container_name: asterisk-clicktocall-wss
    ports:
      - "5038:5038"   # AMI
      - "5060:5060"   # SIP
      - "8088:8088"   # WebSocket (WS)
      - "8089:8089"   # WebSocket Secure (WSS)
      - "5000-5100:5000-5100/udp"  # RTP
    volumes:
      # Configuração unificada que suporta WS + WSS
      - ./asterisk/etc/pjsip-unified.conf:/etc/asterisk/pjsip.conf:ro
      - ./asterisk/etc/extensions.conf:/etc/asterisk/extensions.conf:ro
      - ./asterisk/etc/manager.conf:/etc/asterisk/manager.conf:ro
      - ./asterisk/etc/http.conf:/etc/asterisk/http.conf:ro
      - ./asterisk/etc/modules.conf:/etc/asterisk/modules.conf:ro
      - ./asterisk/etc/rtp.conf:/etc/asterisk/rtp.conf:ro
      - ./asterisk/etc/asterisk.conf:/etc/asterisk/asterisk.conf:ro
      - ./asterisk/etc/logger.conf:/etc/asterisk/logger.conf:ro
      # Volume para certificados (será criado automaticamente)
      - asterisk_certs:/etc/asterisk/keys
    environment:
      - ASTERISK_UID=1000
      - ASTERISK_GID=1000
    healthcheck:
      test: ["CMD", "asterisk", "-rx", "core show version"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - clicktocall

  # Serviço auxiliar para gerar certificados de desenvolvimento
  cert-generator:
    image: alpine:latest
    container_name: cert-generator
    volumes:
      - asterisk_certs:/certs
      - ./asterisk/certs/generate-dev-certs.sh:/generate-certs.sh:ro
    command: >
      sh -c "
        apk add --no-cache openssl &&
        if [ ! -f /certs/asterisk.crt ]; then
          echo 'Gerando certificados de desenvolvimento...' &&
          mkdir -p /certs &&
          openssl genrsa -out /certs/asterisk.key 2048 &&
          openssl req -new -x509 -key /certs/asterisk.key \
            -out /certs/asterisk.crt \
            -days 365 \
            -subj '/C=BR/ST=SP/L=SaoPaulo/O=ClickToCall-Dev/CN=localhost' \
            -addext 'subjectAltName=DNS:localhost,DNS:*.localhost,IP:127.0.0.1,IP:::1' &&
          chmod 600 /certs/asterisk.key &&
          chmod 644 /certs/asterisk.crt &&
          echo 'Certificados gerados com sucesso!'
        else
          echo 'Certificados já existem, pulando geração.'
        fi
      "
    networks:
      - clicktocall

  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: clicktocall-api-wss
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - ASTERISK_HOST=asterisk
      - ASTERISK_PORT=5038
      - ASTERISK_USERNAME=admin
      - ASTERISK_PASSWORD=secret
    depends_on:
      asterisk:
        condition: service_healthy
      cert-generator:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - clicktocall

  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: clicktocall-web-wss
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_ASTERISK_HOST=localhost
      - NEXT_PUBLIC_ASTERISK_WS_PORT=8088
      - NEXT_PUBLIC_ASTERISK_WSS_PORT=8089
      - NEXT_PUBLIC_AGENT_PASSWORD=changeme
      # Forçar WSS para teste (opcional)
      # - NEXT_PUBLIC_FORCE_PROTOCOL=wss
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - clicktocall

volumes:
  asterisk_certs:
    driver: local

networks:
  clicktocall:
    driver: bridge 

services:
  asterisk:
    build:
      context: ./asterisk
      dockerfile: Dockerfile
    container_name: asterisk-clicktocall-wss
    ports:
      - "5038:5038"   # AMI
      - "5060:5060"   # SIP
      - "8088:8088"   # WebSocket (WS)
      - "8089:8089"   # WebSocket Secure (WSS)
      - "5000-5100:5000-5100/udp"  # RTP
    volumes:
      # Configuração unificada que suporta WS + WSS
      - ./asterisk/etc/pjsip-unified.conf:/etc/asterisk/pjsip.conf:ro
      - ./asterisk/etc/extensions.conf:/etc/asterisk/extensions.conf:ro
      - ./asterisk/etc/manager.conf:/etc/asterisk/manager.conf:ro
      - ./asterisk/etc/http.conf:/etc/asterisk/http.conf:ro
      - ./asterisk/etc/modules.conf:/etc/asterisk/modules.conf:ro
      - ./asterisk/etc/rtp.conf:/etc/asterisk/rtp.conf:ro
      - ./asterisk/etc/asterisk.conf:/etc/asterisk/asterisk.conf:ro
      - ./asterisk/etc/logger.conf:/etc/asterisk/logger.conf:ro
      # Volume para certificados (será criado automaticamente)
      - asterisk_certs:/etc/asterisk/keys
    environment:
      - ASTERISK_UID=1000
      - ASTERISK_GID=1000
    healthcheck:
      test: ["CMD", "asterisk", "-rx", "core show version"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - clicktocall

  # Serviço auxiliar para gerar certificados de desenvolvimento
  cert-generator:
    image: alpine:latest
    container_name: cert-generator
    volumes:
      - asterisk_certs:/certs
      - ./asterisk/certs/generate-dev-certs.sh:/generate-certs.sh:ro
    command: >
      sh -c "
        apk add --no-cache openssl &&
        if [ ! -f /certs/asterisk.crt ]; then
          echo 'Gerando certificados de desenvolvimento...' &&
          mkdir -p /certs &&
          openssl genrsa -out /certs/asterisk.key 2048 &&
          openssl req -new -x509 -key /certs/asterisk.key \
            -out /certs/asterisk.crt \
            -days 365 \
            -subj '/C=BR/ST=SP/L=SaoPaulo/O=ClickToCall-Dev/CN=localhost' \
            -addext 'subjectAltName=DNS:localhost,DNS:*.localhost,IP:127.0.0.1,IP:::1' &&
          chmod 600 /certs/asterisk.key &&
          chmod 644 /certs/asterisk.crt &&
          echo 'Certificados gerados com sucesso!'
        else
          echo 'Certificados já existem, pulando geração.'
        fi
      "
    networks:
      - clicktocall

  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: clicktocall-api-wss
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - ASTERISK_HOST=asterisk
      - ASTERISK_PORT=5038
      - ASTERISK_USERNAME=admin
      - ASTERISK_PASSWORD=secret
    depends_on:
      asterisk:
        condition: service_healthy
      cert-generator:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - clicktocall

  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: clicktocall-web-wss
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_ASTERISK_HOST=localhost
      - NEXT_PUBLIC_ASTERISK_WS_PORT=8088
      - NEXT_PUBLIC_ASTERISK_WSS_PORT=8089
      - NEXT_PUBLIC_AGENT_PASSWORD=changeme
      # Forçar WSS para teste (opcional)
      # - NEXT_PUBLIC_FORCE_PROTOCOL=wss
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - clicktocall

volumes:
  asterisk_certs:
    driver: local

networks:
  clicktocall:
    driver: bridge 