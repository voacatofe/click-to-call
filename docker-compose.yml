services:
  # =============================================================================
  # Certificate Generator (Geração automática de certificados WSS)
  # =============================================================================
  cert-generator:
    image: alpine:3.18
    container_name: clicktocall-cert-generator
    volumes:
      - asterisk_certs:/certs
    command: 
      - sh
      - -c
      - |
        apk add --no-cache openssl
        if [ ! -f /certs/asterisk.crt ]; then
          echo 'Gerando certificados WSS para ambiente seguro...'
          mkdir -p /certs
          openssl genrsa -out /certs/asterisk.key 2048
          openssl req -new -x509 -key /certs/asterisk.key -out /certs/asterisk.crt -days 365 \
            -subj '/C=BR/ST=SP/L=SaoPaulo/O=ClickToCall/CN=localhost' \
            -addext "subjectAltName=DNS:localhost,DNS:*.localhost,IP:127.0.0.1,IP:::1"
          chmod 600 /certs/asterisk.key
          chmod 644 /certs/asterisk.crt
          echo 'Certificados WSS gerados com sucesso!'
        else
          echo 'Certificados WSS já existem.'
        fi
    restart: "no"
    networks:
      - clicktocall-network

  # =============================================================================
  # Asterisk VoIP Server (WSS-ONLY - Seguro para HTTPS)
  # =============================================================================
  asterisk:
    build:
      context: ./asterisk
    container_name: asterisk-clicktocall
    restart: unless-stopped
    ports:
      - "127.0.0.1:5038:5038"      # Asterisk Manager Interface (AMI) - localhost only
      # WS removido - WSS-only for security
      - "127.0.0.1:8089:8089"      # WebSocket Secure (WSS) ONLY - localhost only
      - "10000-20000:10000-20000/udp" # RTP media ports (EXPANDIDO: 10.000 portas)
    volumes:
      # Configurações WSS-only
      - ./asterisk/etc/pjsip-unified.conf:/etc/asterisk/pjsip.conf:ro
      - ./asterisk/etc/http-wss.conf:/etc/asterisk/http.conf:ro
      - ./asterisk/etc/extensions.conf:/etc/asterisk/extensions.conf:ro
      - ./asterisk/etc/manager.conf:/etc/asterisk/manager.conf:ro
      - ./asterisk/etc/modules.conf:/etc/asterisk/modules.conf:ro
      - ./asterisk/etc/rtp.conf:/etc/asterisk/rtp.conf:ro
      - ./asterisk/etc/asterisk.conf:/etc/asterisk/asterisk.conf:ro
      - ./asterisk/etc/logger.conf:/etc/asterisk/logger.conf:ro
      - ./asterisk/sounds:/var/lib/asterisk/sounds
      - ./asterisk/recordings:/var/spool/asterisk/monitor
      # Volume para certificados WSS
      - asterisk_certs:/etc/asterisk/keys
    environment:
      - ASTERISK_UID=1000
      - ASTERISK_GID=1000
      - AMI_SECRET=${AMI_SECRET:-changeme_update_this}
      - AGENT_1001_PASSWORD=${AGENT_1001_PASSWORD:-changeme_update_this}
    depends_on:
      cert-generator:
        condition: service_completed_successfully
    networks:
      - clicktocall-network
    healthcheck:
      test: ["CMD-SHELL", "asterisk -rx 'core show version' && asterisk -rx 'http show status'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # =============================================================================
  # Backend API
  # =============================================================================
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: clicktocall-api
    restart: unless-stopped
    ports:
      - "3001:3001"
    env_file:
      - ./apps/api/.env
    environment:
      - NODE_ENV=development
      - ASTERISK_HOST=asterisk
      - ASTERISK_PORT=5038
      - AMI_SECRET=${AMI_SECRET:-changeme_update_this}
    depends_on:
      asterisk:
        condition: service_healthy
    networks:
      - clicktocall-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # =============================================================================
  # Frontend Web Application (WSS-ONLY)
  # =============================================================================
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: clicktocall-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - ./apps/web/.env
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_ASTERISK_HOST=localhost
      # WSS-Only configuration - NO WS PORT
      - NEXT_PUBLIC_ASTERISK_WSS_PORT=8089
      - NEXT_PUBLIC_AGENT_PASSWORD=${AGENT_1001_PASSWORD:-changeme_update_this}
      # Force WSS for security
      - NEXT_PUBLIC_FORCE_PROTOCOL=wss
    depends_on:
      api:
        condition: service_healthy
    networks:
      - clicktocall-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

# =============================================================================
# Networks Configuration
# =============================================================================
networks:
  clicktocall-network:
    name: clicktocall-network
    driver: bridge

# =============================================================================
# Volumes Configuration
# =============================================================================
volumes:
  asterisk_certs:
    driver: local
    name: clicktocall-asterisk-certs
  asterisk-recordings:
    driver: local
  asterisk-logs:
    driver: local 