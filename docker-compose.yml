version: '3.8'

services:
  # =============================================================================
  # Certificate Generator (Run once to generate TLS certificates)
  # =============================================================================
  cert-generator:
    image: alpine:3.18
    profiles: ["tools"]  # Only run when explicitly specified
    volumes:
      - ./asterisk/certs:/certs
    command: >
      sh -c "apk add --no-cache openssl &&
             if [ ! -f /certs/privkey.pem ]; then
               openssl req -x509 -newkey rsa:2048 -nodes \
                 -keyout /certs/privkey.pem \
                 -out /certs/fullchain.pem \
                 -days 365 -subj '/CN=localhost';
               echo 'Certificates generated successfully';
             else
               echo 'Certificates already exist';
             fi"

  # =============================================================================
  # Asterisk VoIP Server
  # =============================================================================
  asterisk:
    build:
      context: ./asterisk
    container_name: asterisk-clicktocall
    restart: unless-stopped
    ports:
      - "5038:5038"      # Asterisk Manager Interface (AMI)
      - "8088:8088"      # WebSocket (WS) for SIP signaling
      - "8089:8089"      # WebSocket Secure (WSS) for SIP signaling
      - "10000-20000:10000-20000/udp" # RTP media ports
    volumes:
      - ./asterisk/etc:/etc/asterisk
      - ./asterisk/sounds:/var/lib/asterisk/sounds
      - ./asterisk/recordings:/var/spool/asterisk/monitor
      - ./asterisk/certs:/etc/asterisk/keys
    environment:
      - ASTERISK_UID=1000
      - ASTERISK_GID=1000
    networks:
      - clicktocall-network
    healthcheck:
      test: ["CMD-SHELL", "asterisk -rx 'core show version' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # =============================================================================
  # Backend API
  # =============================================================================
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: clicktocall-api
    restart: unless-stopped
    ports:
      - "3001:3001"
    env_file:
      - ./apps/api/.env
    depends_on:
      asterisk:
        condition: service_healthy
    networks:
      - clicktocall-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # =============================================================================
  # Frontend Web Application
  # =============================================================================
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: clicktocall-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - ./apps/web/.env
    depends_on:
      api:
        condition: service_healthy
    networks:
      - clicktocall-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

# =============================================================================
# Networks Configuration
# =============================================================================
networks:
  clicktocall-network:
    name: clicktocall-network
    driver: bridge

# =============================================================================
# Volumes Configuration
# =============================================================================
volumes:
  asterisk-recordings:
    driver: local
  asterisk-logs:
    driver: local 