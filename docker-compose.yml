services:
  # =============================================================================
  # Certificate Generator (Geração automática de certificados WSS)
  # =============================================================================
  cert-generator:
    image: alpine:3.18
    container_name: clicktocall-cert-generator
    volumes:
      - asterisk_certs:/certs
    command: 
      - sh
      - -c
      - |
        apk add --no-cache openssl
        if [ ! -f /certs/asterisk.crt ]; then
          echo 'Gerando certificados WSS para ambiente seguro...'
          mkdir -p /certs
          openssl genrsa -out /certs/asterisk.key 2048
          openssl req -new -x509 -key /certs/asterisk.key -out /certs/asterisk.crt -days 365 \
            -subj '/C=BR/ST=SP/L=SaoPaulo/O=ClickToCall/CN=localhost' \
            -addext "subjectAltName=DNS:localhost,DNS:*.localhost,IP:127.0.0.1,IP:::1"
          chmod 600 /certs/asterisk.key
          chmod 644 /certs/asterisk.crt
          echo 'Certificados WSS gerados com sucesso!'
        else
          echo 'Certificados WSS já existem.'
        fi
    restart: "no"
    networks:
      - clicktocall-network
      
  # =============================================================================
  # Serviço do Asterisk para VoIP/WebRTC
  # =============================================================================
  asterisk:
    build:
      context: ./asterisk
      dockerfile: Dockerfile
    container_name: asterisk-clicktocall
    restart: unless-stopped
    ports:
      # AMI, WSS (para WebRTC)
      - "127.0.0.1:5038:5038"      # AMI - localhost only
      - "127.0.0.1:8089:8089"      # WSS - localhost only  
      - "10000-10200:10000-10200/udp" # RTP reduzido: 200 portas (suficiente para ~100 chamadas)
    volumes:
      # Mapeia todo o diretório de configuração (leitura/escrita para permitir substituição de variáveis)
      - ./asterisk/etc:/etc/asterisk
      # Mapeia sons customizados (ex: URA)
      - ./asterisk/sounds:/var/lib/asterisk/sounds
      # Gravações de chamadas em um volume nomeado para persistência
      - asterisk_recordings:/var/spool/asterisk/monitor
      # Certificados em um volume nomeado para que não sejam recriados sempre
      - asterisk_certs:/etc/asterisk/keys
    env_file:
      - .env
    environment:
      - ASTERISK_UID=1000
      - ASTERISK_GID=1000
    depends_on:
      cert-generator:
        condition: service_completed_successfully
    networks:
      - clicktocall-network
    healthcheck:
      test: ["CMD-SHELL", "asterisk -rx 'core show version' >/dev/null 2>&1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # =============================================================================
  # Backend API
  # =============================================================================
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: clicktocall-api
    restart: unless-stopped
    ports:
      - "3001:3001"
    env_file:
      - ./apps/api/.env
    environment:
      - NODE_ENV=development
      - ASTERISK_HOST=asterisk  # Conecta ao container Asterisk na rede Docker
      - ASTERISK_PORT=5038
      - AMI_SECRET=${AMI_SECRET:-changeme_update_this}
    depends_on:
      asterisk:
        condition: service_healthy
    networks:
      - clicktocall-network
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => { process.exit(1); })\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # =============================================================================
  # Frontend Web Application (WSS-ONLY)
  # =============================================================================
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001}
        NEXT_PUBLIC_ASTERISK_HOST: ${NEXT_PUBLIC_ASTERISK_HOST:-localhost}
        NEXT_PUBLIC_ASTERISK_WSS_PORT: ${NEXT_PUBLIC_ASTERISK_WSS_PORT:-8089}
        NEXT_PUBLIC_AGENT_PASSWORD: ${NEXT_PUBLIC_AGENT_PASSWORD:-changeme}
        NEXT_PUBLIC_FORCE_PROTOCOL: ${NEXT_PUBLIC_FORCE_PROTOCOL:-wss}
        NEXT_PUBLIC_AGENT_ID: ${NEXT_PUBLIC_AGENT_ID:-agent-1001-wss}
        NEXT_PUBLIC_ASTERISK_REALM: ${NEXT_PUBLIC_ASTERISK_REALM:-clicktocall.local}
        NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
    container_name: clicktocall-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    # As variáveis de ambiente aqui são para tempo de execução, mas o build já as injetou.
    # Manter para consistência ou para outros possíveis usos em tempo de execução.
    env_file:
      - ./apps/web/.env
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3001}
      - NEXT_PUBLIC_ASTERISK_HOST=${NEXT_PUBLIC_ASTERISK_HOST:-localhost}
      - NEXT_PUBLIC_ASTERISK_WSS_PORT=${NEXT_PUBLIC_ASTERISK_WSS_PORT:-8089}
      - NEXT_PUBLIC_AGENT_PASSWORD=${NEXT_PUBLIC_AGENT_PASSWORD:-changeme}
      - NEXT_PUBLIC_FORCE_PROTOCOL=${NEXT_PUBLIC_FORCE_PROTOCOL:-wss}
      - NEXT_PUBLIC_AGENT_ID=${NEXT_PUBLIC_AGENT_ID:-agent-1001-wss}
      - NEXT_PUBLIC_ASTERISK_REALM=${NEXT_PUBLIC_ASTERISK_REALM:-clicktocall.local}
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
    depends_on:
      api:
        condition: service_healthy
    networks:
      - clicktocall-network
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3000', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => { process.exit(1); })\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

# =============================================================================
# Networks Configuration
# =============================================================================
networks:
  clicktocall-network:
    name: clicktocall-network
    driver: bridge

# =============================================================================
# Volumes Configuration
# =============================================================================
volumes:
  asterisk_certs:
    driver: local
    name: clicktocall-asterisk-certs
  asterisk_recordings:
    driver: local
  asterisk_logs:
    driver: local 