services:
  # =============================================================================
  # Certificate Generator (Geração automática de certificados WSS)
  # =============================================================================
  cert-generator:
    image: alpine:3.18
    volumes:
      - asterisk_certs:/certs
    command: 
      - sh
      - -c
      - |
        apk add --no-cache openssl
        if [ ! -f /certs/asterisk.crt ]; then
          echo 'Gerando certificados WSS para ambiente seguro...'
          mkdir -p /certs
          openssl genrsa -out /certs/asterisk.key 2048
          openssl req -new -x509 -key /certs/asterisk.key -out /certs/asterisk.crt -days 365 \
            -subj '/C=BR/ST=SP/L=SaoPaulo/O=ClickToCall/CN=localhost' \
            -addext "subjectAltName=DNS:localhost,DNS:*.localhost,IP:127.0.0.1,IP:::1"
          chmod 600 /certs/asterisk.key
          chmod 644 /certs/asterisk.crt
          echo 'Certificados WSS gerados com sucesso!'
        else
          echo 'Certificados WSS já existem.'
        fi
    restart: "no"
    networks:
      - clicktocall-network
      
  # =============================================================================
  # VoIP Service (Asterisk)
  # =============================================================================
  voip:
    build:
      context: ./asterisk
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      # AMI (apenas localhost, por segurança)
      - "127.0.0.1:5038:5038"
      # WSS (exposto para o proxy do Easypanel)
      - "8089:8089"
      # RTP (essencial para o áudio)
      - "10000-10200:10000-10200/udp"
    volumes:
      # Mapeia todo o diretório de configuração (leitura/escrita para permitir substituição de variáveis)
      - ./asterisk/etc:/etc/asterisk
      # Mapeia sons customizados (ex: URA)
      - ./asterisk/sounds:/var/lib/asterisk/sounds
      # Gravações de chamadas em um volume nomeado para persistência
      - asterisk_recordings:/var/spool/asterisk/monitor
      # Certificados em um volume nomeado para que não sejam recriados sempre
      - asterisk_certs:/etc/asterisk/keys
    environment:
      - ASTERISK_UID=1000
      - ASTERISK_GID=1000
      # Passando as variáveis para o entrypoint.sh para configurar o Asterisk
      - AMI_SECRET=${AMI_SECRET}
      - AGENT_1001_PASSWORD=${AGENT_1001_PASSWORD}
      - EXTERNAL_IP=${EXTERNAL_IP}
    depends_on:
      cert-generator:
        condition: service_completed_successfully
    networks:
      - clicktocall-network
    healthcheck:
      test: ["CMD-SHELL", "asterisk -rx 'core show version' >/dev/null 2>&1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # =============================================================================
  # Backend Service
  # =============================================================================
  backend:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    restart: unless-stopped
    # A porta será gerenciada pelo proxy reverso do Easypanel
    # ports:
    #   - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - ASTERISK_HOST=voip
      - ASTERISK_PORT=5038
      - ASTERISK_AMI_PORT=5038
      - ASTERISK_AMI_USER=admin
      - ASTERISK_AMI_PASSWORD=${AMI_SECRET:-changeme_update_this}
      - AMI_SECRET=${AMI_SECRET:-changeme_update_this}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET:-64a97de5b7422c06c9116bb96b076e3a396c3c92b27e87d5005dc345dc4aa2c9}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - RD_STATION_CLIENT_ID=${RD_STATION_CLIENT_ID}
      - RD_STATION_CLIENT_SECRET=${RD_STATION_CLIENT_SECRET}
      - RD_STATION_API_BASE=https://api.rd.services
      - RD_STATION_REDIRECT_URI=${RD_STATION_REDIRECT_URI}
    depends_on:
      voip:
        condition: service_healthy
    networks:
      - clicktocall-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/api/health || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 40s

  # =============================================================================
  # Frontend Service
  # =============================================================================
  frontend:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001}
        NEXT_PUBLIC_ASTERISK_HOST: ${NEXT_PUBLIC_ASTERISK_HOST:-localhost}
        NEXT_PUBLIC_ASTERISK_WSS_PORT: ${NEXT_PUBLIC_ASTERISK_WSS_PORT:-8089}
        NEXT_PUBLIC_AGENT_PASSWORD: ${NEXT_PUBLIC_AGENT_PASSWORD:-changeme}
        NEXT_PUBLIC_FORCE_PROTOCOL: ${NEXT_PUBLIC_FORCE_PROTOCOL:-wss}
        NEXT_PUBLIC_AGENT_ID: ${NEXT_PUBLIC_AGENT_ID:-agent-1001-wss}
        NEXT_PUBLIC_ASTERISK_REALM: ${NEXT_PUBLIC_ASTERISK_REALM:-clicktocall.local}
        NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
    restart: unless-stopped
    # A porta será gerenciada pelo proxy reverso do Easypanel
    # ports:
    #   - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3001}
      - NEXT_PUBLIC_ASTERISK_HOST=${NEXT_PUBLIC_ASTERISK_HOST:-localhost}
      - NEXT_PUBLIC_ASTERISK_WSS_PORT=${NEXT_PUBLIC_ASTERISK_WSS_PORT:-8089}
      - NEXT_PUBLIC_AGENT_PASSWORD=${NEXT_PUBLIC_AGENT_PASSWORD:-changeme}
      - NEXT_PUBLIC_FORCE_PROTOCOL=${NEXT_PUBLIC_FORCE_PROTOCOL:-wss}
      - NEXT_PUBLIC_AGENT_ID=${NEXT_PUBLIC_AGENT_ID:-agent-1001-wss}
      - NEXT_PUBLIC_ASTERISK_REALM=${NEXT_PUBLIC_ASTERISK_REALM:-clicktocall.local}
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - clicktocall-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 30s

# =============================================================================
# Networks Configuration
# =============================================================================
networks:
  clicktocall-network:
    name: clicktocall-network
    driver: bridge

# =============================================================================
# Volumes Configuration
# =============================================================================
volumes:
  asterisk_certs:
    driver: local
    name: clicktocall-asterisk-certs
  asterisk_recordings:
    driver: local
  asterisk_logs:
    driver: local 