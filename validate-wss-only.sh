#!/bin/bash

# =============================================================================
# SCRIPT DE VALIDA√á√ÉO WSS-ONLY
# =============================================================================
# Garante que APENAS WSS est√° configurado (sem WS inseguro)

echo "üîê Validando configura√ß√£o WSS-only..."
echo "===================================="

ERRORS=0

# 1. Verificar se configura√ß√µes WS foram removidas
echo "1. Verificando remo√ß√£o de configura√ß√µes WS inseguras..."

if grep -r "protocol=ws" asterisk/etc/ | grep -v "protocol=wss"; then
    echo "   ‚ùå FALHA: Configura√ß√µes WS (inseguras) ainda presentes!"
    ERRORS=$((ERRORS + 1))
else
    echo "   ‚úÖ Configura√ß√µes WS removidas"
fi

if grep -r "transport-ws\|agent.*-ws" asterisk/etc/ | grep -v "wss"; then
    echo "   ‚ùå FALHA: Endpoints WS ainda configurados!"
    ERRORS=$((ERRORS + 1))
else
    echo "   ‚úÖ Endpoints WS removidos"
fi

# 2. Verificar porta 8088 (WS) removida
echo "2. Verificando remo√ß√£o da porta WS (8088)..."

if grep -r "8088" docker-compose.yml; then
    echo "   ‚ùå FALHA: Porta 8088 (WS) ainda exposta!"
    ERRORS=$((ERRORS + 1))
else
    echo "   ‚úÖ Porta WS (8088) removida"
fi

# 3. Verificar configura√ß√µes WSS presentes
echo "3. Verificando configura√ß√µes WSS..."

if grep -q "protocol=wss" asterisk/etc/pjsip*.conf; then
    echo "   ‚úÖ Configura√ß√£o WSS presente"
else
    echo "   ‚ùå FALHA: Configura√ß√£o WSS n√£o encontrada!"
    ERRORS=$((ERRORS + 1))
fi

if grep -q "8089" docker-compose.yml; then
    echo "   ‚úÖ Porta WSS (8089) configurada"
else
    echo "   ‚ùå FALHA: Porta WSS n√£o exposta!"
    ERRORS=$((ERRORS + 1))
fi

# 4. Verificar certificados WSS
echo "4. Verificando certificados WSS..."

if grep -q "cert_file.*asterisk.crt" asterisk/etc/pjsip*.conf && grep -q "priv_key_file.*asterisk.key" asterisk/etc/pjsip*.conf; then
    echo "   ‚úÖ Certificados WSS configurados"
else
    echo "   ‚ùå FALHA: Certificados WSS n√£o configurados!"
    ERRORS=$((ERRORS + 1))
fi

# 5. Verificar endpoints WSS no frontend
echo "5. Verificando frontend WSS-only..."

if grep -q "agent-1001-wss" apps/web/src/components/*.tsx; then
    echo "   ‚úÖ Frontend usando endpoints WSS"
else
    echo "   ‚ùå FALHA: Frontend n√£o configurado para WSS!"
    ERRORS=$((ERRORS + 1))
fi

if grep -q "wss://" apps/web/src/components/*.tsx; then
    echo "   ‚úÖ Frontend for√ßando protocolo WSS"
else
    echo "   ‚ùå FALHA: Frontend n√£o for√ßa WSS!"
    ERRORS=$((ERRORS + 1))
fi

# RESUMO
echo ""
echo "üìä RESUMO DA VALIDA√á√ÉO WSS-ONLY"
echo "==============================="

if [ $ERRORS -eq 0 ]; then
    echo "‚úÖ SUCESSO: Configura√ß√£o WSS-only validada!"
    echo ""
    echo "üîí Seu sistema est√° configurado de forma SEGURA:"
    echo "   ‚Ä¢ Apenas WSS (criptografado) habilitado"
    echo "   ‚Ä¢ Configura√ß√µes WS (inseguras) removidas" 
    echo "   ‚Ä¢ Compat√≠vel com ambiente HTTPS"
    echo "   ‚Ä¢ Certificados SSL configurados"
    echo ""
    echo "üöÄ Para iniciar (WSS-only):"
    echo "   docker-compose up"
else
    echo "‚ùå FALHAS: $ERRORS problema(s) de seguran√ßa encontrado(s)!"
    echo ""
    echo "‚ö†Ô∏è  ATEN√á√ÉO: Sistema n√£o est√° seguro para ambiente HTTPS!"
    echo "üîß Corrija os problemas antes de usar em produ√ß√£o."
fi

echo ""
echo "üîç Valida√ß√£o WSS-only conclu√≠da!"
exit $ERRORS