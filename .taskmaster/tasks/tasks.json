{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Project Repository and Initial Stack",
        "description": "Initialize project repository with Node.js/TypeScript backend and React frontend, set up CI/CD pipeline, and define initial project structure. This now includes the Docker and Easypanel production environment setup.",
        "details": "Create a new GitHub repository. Initialize with Node.js/TypeScript for backend (using Express), React for frontend. Set up GitHub Actions for CI/CD. Configure linting, testing, and code formatting. Includes docker-compose.yml and Dockerfiles for production deployment.",
        "testStrategy": "Verify repository setup by running initial linting and test scripts. Ensure CI/CD pipeline triggers on push. Confirm successful deployment to Easypanel.",
        "priority": "medium",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          { "id": 1, "title": "Create Project Repository", "status": "done", "dependencies": [] },
          { "id": 2, "title": "Define Folder Structure", "status": "done", "dependencies": [1] },
          { "id": 3, "title": "Initialize Backend Stack", "status": "done", "dependencies": [2] },
          { "id": 4, "title": "Initialize Frontend Stack", "status": "done", "dependencies": [2] },
          { "id": 5, "title": "Configure Linting and Testing", "status": "done", "dependencies": [3, 4] },
          { "id": 6, "title": "Set Up CI/CD Pipeline", "status": "done", "dependencies": [5] }
        ]
      },
      {
        "id": 2,
        "title": "RD Station API Integration Setup",
        "description": "Implement OAuth 2.0 authentication and basic API integration with RD Station CRM.",
        "details": "Register application in RD Station developer portal. Implement OAuth 2.0 flow for authentication. Create backend endpoints to fetch contacts and deals, and to create activities/notes. Store tokens securely.",
        "testStrategy": "Test authentication flow and API calls with mock data. Verify contact retrieval and activity creation.",
        "priority": "medium",
        "dependencies": [1],
        "status": "in-progress",
        "subtasks": [
            { "id": 1, "title": "Application Registration in RD Station", "status": "done", "dependencies": [] },
            { "id": 2, "title": "Implement OAuth 2.0 Authorization Flow", "status": "done", "dependencies": [1] },
            { "id": 3, "title": "Secure Token Storage Implementation", "status": "pending", "dependencies": [2] },
            { "id": 4, "title": "Backend Endpoint Creation for Contacts", "status": "pending", "dependencies": [3] },
            { "id": 5, "title": "Backend Endpoint Creation for Deals", "status": "pending", "dependencies": [3] },
            { "id": 6, "title": "Backend Endpoint Creation for Activities/Notes", "status": "pending", "dependencies": [3] },
            { "id": 7, "title": "API Documentation Review and Contract Validation", "status": "pending", "dependencies": [4, 5, 6] }
        ]
      },
      {
        "id": 3,
        "title": "Twilio (or CPaaS) Voice API Integration",
        "description": "Integrate Twilio (or equivalent CPaaS) for initiating and managing VoIP calls.",
        "details": "Set up Twilio account and obtain API keys. Implement backend endpoints to initiate calls (WebRTC and call bridging). Use Twilio SDK for Node.js. Handle call events (answered, completed, failed) via webhooks. Store call metadata.",
        "testStrategy": "Test call initiation and event handling with test numbers. Verify webhook integration and call metadata storage.",
        "priority": "medium",
        "dependencies": [1],
        "status": "pending",
        "subtasks": [
            { "id": 1, "title": "Twilio Account Setup", "status": "pending", "dependencies": [] },
            { "id": 2, "title": "API Key Management", "status": "pending", "dependencies": [1] },
            { "id": 3, "title": "Backend Endpoint for Call Initiation", "status": "pending", "dependencies": [2] },
            { "id": 4, "title": "WebRTC Integration", "status": "pending", "dependencies": [3] },
            { "id": 5, "title": "Call Event Webhook Handling", "status": "pending", "dependencies": [3] },
            { "id": 6, "title": "Call Metadata Storage", "status": "pending", "dependencies": [5] },
            { "id": 7, "title": "SDK Usage and Helper Library Integration", "status": "pending", "dependencies": [2] },
            { "id": 8, "title": "Test Number Validation", "status": "pending", "dependencies": [3] }
        ]
      },
      {
        "id": 4,
        "title": "Develop Reusable Click-to-Call UI Component",
        "description": "Develop a reusable UI component for click-to-call functionality, adaptable for various integrations (e.g., Chrome Extension, direct web embed).",
        "details": "Instead of focusing solely on a Chrome Extension, the primary goal is to create a flexible, self-contained dialer component (e.g., in React). This component will handle UI states (idle, calling, connected) and trigger backend API calls. The initial implementation can be tested within the frontend application, and later adapted for a Chrome Extension or other CRM integrations.",
        "testStrategy": "Test the component's UI states and event handling within a test page. Verify that it correctly triggers backend API endpoints for call initiation.",
        "priority": "medium",
        "dependencies": [2, 3],
        "status": "pending",
        "subtasks": [
            { "id": 1, "title": "Marketplace Integration Research", "status": "pending", "dependencies": [] },
            { "id": 2, "title": "Chrome Extension Development", "status": "pending", "dependencies": [1] },
            { "id": 3, "title": "UI Injection Logic", "status": "pending", "dependencies": [2] },
            { "id": 4, "title": "Button Event Handling", "status": "pending", "dependencies": [3] },
            { "id": 5, "title": "Backend Call Trigger", "status": "pending", "dependencies": [4] },
            { "id": 6, "title": "Call Status Overlay", "status": "pending", "dependencies": [5] },
            { "id": 7, "title": "End-to-End Flow Testing", "status": "pending", "dependencies": [] }
        ]
      },
      {
        "id": 5,
        "title": "Automatic Call Logging in CRM",
        "description": "Automatically log call details as activities/notes in RD Station CRM.",
        "details": "On call completion, backend receives event from Twilio. Fetch call metadata (duration, result, recording URL). Create activity/note in RD Station CRM via API. Include call details and link to recording if available.",
        "testStrategy": "Test end-to-end flow: call → event → log creation in CRM. Verify all metadata is correctly stored.",
        "priority": "medium",
        "dependencies": [2, 3],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Secure Call Recording Storage and Compliance",
        "description": "Implement secure storage and management of call recordings with compliance to LGPD.",
        "details": "Store call recordings in an S3-compatible encrypted cloud storage (e.g., Amazon S3, DigitalOcean Spaces, MinIO), which can be easily integrated with the production environment. Generate secure, time-limited access URLs. Implement data retention and deletion policies. Ensure compliance with LGPD for personal data.",
        "testStrategy": "Test recording upload, download, and deletion. Verify access controls and compliance checks.",
        "priority": "medium",
        "dependencies": [3],
        "status": "pending",
        "subtasks": [
            { "id": 1, "title": "Encrypted Cloud Storage Setup", "status": "pending", "dependencies": [] },
            { "id": 2, "title": "Recording Upload Implementation", "status": "pending", "dependencies": [1] },
            { "id": 3, "title": "Time-Limited URL Generation", "status": "pending", "dependencies": [2] },
            { "id": 4, "title": "Data Retention Policy Enforcement", "status": "pending", "dependencies": [2] },
            { "id": 5, "title": "Deletion Logic Implementation", "status": "pending", "dependencies": [4] },
            { "id": 6, "title": "Compliance Checks (e.g., LGPD)", "status": "pending", "dependencies": [4, 5] },
            { "id": 7, "title": "Access Control Validation", "status": "pending", "dependencies": [3, 6] }
        ]
      },
      {
        "id": 7,
        "title": "Metrics Dashboard and Reporting",
        "description": "Develop a dashboard for call metrics and reporting.",
        "details": "Create a React dashboard to display call volume, duration, success rate, and agent rankings. Aggregate data from backend database. Optionally, explore integration with RD Station CRM analytics if API allows. Use Chart.js or D3.js for visualizations.",
        "testStrategy": "Test dashboard with mock and real data. Verify data aggregation and visualization accuracy.",
        "priority": "medium",
        "dependencies": [1, 5],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Onboarding, Documentation, and Support Materials",
        "description": "Create self-service onboarding, documentation, and support resources.",
        "details": "Develop step-by-step onboarding guides for admins and users. Create FAQ and help articles. Implement in-app tooltips and support links. Prepare materials for email and LinkedIn campaigns targeting ex-Zenvia users.",
        "testStrategy": "Validate onboarding flow with test users. Review documentation for clarity and completeness.",
        "priority": "medium",
        "dependencies": [1],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Finalize Production Infrastructure Setup",
        "description": "Finalize and document the production deployment infrastructure, including Docker, Easypanel, and Prisma migration scripts.",
        "details": "This task involves three key areas: 1. Documenting the complete step-by-step deployment process in the main README.md. 2. Creating a dedicated, non-interactive script (`npm run migrate:prod`) that runs `npx prisma migrate deploy`. 3. Adding health check configurations to the `docker-compose.yml`.",
        "testStrategy": "1. Verify README.md documentation. 2. Run the migration script against the production database. 3. Observe the container startup sequence with health checks.",
        "priority": "high",
        "dependencies": [1, 2, 3, 4, 5, 6, 7, 8],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-02T12:11:29.998Z",
      "updated": "2025-07-04T19:30:00.000Z",
      "description": "Tasks for master context"
    }
  }
}