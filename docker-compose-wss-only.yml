services:
  # =============================================================================
  # Certificate Generator (OBRIGATÓRIO para WSS)
  # =============================================================================
  cert-generator:
    image: alpine:3.18
    container_name: wss-cert-generator
    volumes:
      - asterisk_certs:/certs
    command: 
      - sh
      - -c
      - |
        apk add --no-cache openssl
        if [ ! -f /certs/asterisk.crt ]; then
          echo 'Gerando certificados para WSS...'
          mkdir -p /certs
          openssl genrsa -out /certs/asterisk.key 2048
          openssl req -new -x509 -key /certs/asterisk.key -out /certs/asterisk.crt -days 365 -subj '/C=BR/ST=SP/L=SaoPaulo/O=ClickToCall-WSS/CN=localhost'
          chmod 600 /certs/asterisk.key
          chmod 644 /certs/asterisk.crt
          echo 'Certificados WSS gerados com sucesso!'
        else
          echo 'Certificados WSS ja existem.'
        fi
    restart: "no"
    networks:
      - clicktocall-wss

  # =============================================================================
  # Asterisk VoIP Server (WSS-Only)
  # =============================================================================
  asterisk:
    build:
      context: ./asterisk
      dockerfile: Dockerfile
    container_name: asterisk-wss-only
    restart: unless-stopped
    ports:
      - "5038:5038"    # AMI
      - "5060:5060"    # SIP
      # - "8088:8088"  # WS (REMOVIDO - WSS-only)
      - "8089:8089"    # WSS (OBRIGATÓRIO)
      - "5000-5100:5000-5100/udp"  # RTP (range menor para Windows)
    volumes:
      # Configurações WSS-only
      - ./asterisk/etc/pjsip-wss-only.conf:/etc/asterisk/pjsip.conf:ro
      - ./asterisk/etc/http-wss.conf:/etc/asterisk/http.conf:ro
      - ./asterisk/etc/extensions.conf:/etc/asterisk/extensions.conf:ro
      - ./asterisk/etc/manager.conf:/etc/asterisk/manager.conf:ro
      - ./asterisk/etc/modules.conf:/etc/asterisk/modules.conf:ro
      - ./asterisk/etc/rtp.conf:/etc/asterisk/rtp.conf:ro
      - ./asterisk/etc/asterisk.conf:/etc/asterisk/asterisk.conf:ro
      - ./asterisk/etc/logger.conf:/etc/asterisk/logger.conf:ro
      # Volume para certificados WSS
      - asterisk_certs:/etc/asterisk/keys
    environment:
      - ASTERISK_UID=1000
      - ASTERISK_GID=1000
    depends_on:
      cert-generator:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "asterisk -rx 'core show version' && asterisk -rx 'http show status' | grep 'HTTPS Server Enabled'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    # network_mode: host  # Descomente se tiver problemas com WSS no Windows
    networks:
      - clicktocall-wss

  # =============================================================================
  # Backend API
  # =============================================================================
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: clicktocall-api-wss
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - ASTERISK_HOST=asterisk
      - ASTERISK_PORT=5038
      - ASTERISK_USERNAME=admin
      - ASTERISK_PASSWORD=secret
      # Variáveis reais do Supabase
      - API_SUPABASE_URL=https://vosmwoctehquugfynqav.supabase.co
      - API_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZvc213b2N0ZWhxdXVnZnlucWF2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA5MTQ2NzMsImV4cCI6MjA1NjQ5MDY3M30.AInGFUDs9ch2seo0Kto0LomzL1OMPjpyr0aoSNpLhbI
      - API_SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZvc213b2N0ZWhxdXVnZnlucWF2Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0MDkxNDY3MywiZXhwIjoyMDU2NDkwNjczfQ.H3e7zPhJs53wGUcZvcqTY8fiBC9kSlP-DusyGzKEYSA
      - DATABASE_URL=postgresql://postgres:efDj9M5BiNKoXF6u@db.vosmwoctehquugfynqav.supabase.co:5432/postgres?sslmode=require
    depends_on:
      asterisk:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - clicktocall-wss

  # =============================================================================
  # Frontend Web Application (WSS-Only)
  # =============================================================================
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: clicktocall-web-wss
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_ASTERISK_HOST=localhost
      # WSS-Only: remover WS_PORT
      - NEXT_PUBLIC_ASTERISK_WSS_PORT=8089
      - NEXT_PUBLIC_AGENT_PASSWORD=changeme
      # OBRIGATÓRIO: Forçar WSS
      - NEXT_PUBLIC_FORCE_PROTOCOL=wss
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - clicktocall-wss

# =============================================================================
# Volumes Configuration
# =============================================================================
volumes:
  asterisk_certs:
    driver: local

# =============================================================================
# Networks Configuration
# =============================================================================
networks:
  clicktocall-wss:
    name: clicktocall-wss
    driver: bridge 